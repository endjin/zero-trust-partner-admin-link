Function Set-ZeroTrustPartnerAdminLink
{
    <#
    .SYNOPSIS

    Configures Azure Partner Admin Link for the specified subscriptions.

    .DESCRIPTION
        
    .EXAMPLE

    Set-ZeroTrustPartnerAdminLink -PartnerName Contoso -MpnId 12345678 -PartnerIdentityAppId 2038cf8a-8086-4b02-809f-28ecc24c60a3 -SubscriptionsCsv .\customer-subs.csv
        
    .PARAMETER SubscriptionsCsv

    Path to a CSV file containing the list of Azure Subscriptions that PAL is going to be set on.
    This list can be generated by running the Export-CustomerSubscriptionsAsCsvForPartnerAdminLink Cmdlet.

    .PARAMETER PartnerName

    Name of the Microsoft Partner which is going to be assigned PAL

    .PARAMETER PartnerIdentityAppId



    .PARAMETER MpnId

    Microsoft Partner's Microsoft Partner Network Id. 
    This should be the Location or HQ based Id and not a Virtual Org.

    .NOTES
    #>

    [CmdletBinding()]
    Param 
    (
        [Parameter(Mandatory=$true)]
        [string] $SubscriptionsCsv,

        [Parameter(Mandatory=$true)]
        [string] $PartnerName,

        [Parameter(Mandatory=$true)]
        [guid] $PartnerIdentityAppId,

        [Parameter(Mandatory=$true)]
        [string] $MpnId
    )

    $ErrorActionPreference = 'Stop'

    if (!(Get-Module -ListAvailable Az)) 
    {
        Install-Module Az -AllowClobber -Repository PSGallery -Force -Scope CurrentUser
    }

    Write-Host "Login with an account that has permissions to manage AAD applications and perform ARM role assignments"
    Connect-AzAccount

    # Create a service principal associated with partner identity
    $customerSp = New-AzADServicePrincipal -DisplayName "$PartnerName Partner Admin Link - DO NOT DELETE" -ApplicationId $PartnerIdentityAppId -SkipAssignment
    $customerSpCredential = New-AzADServicePrincipalCredential -ObjectId $customerSp.Id

    # Assign the PAL to each of the required subscriptions
    $subscriptions = Import-Csv $SubscriptionsCsv
    Write-Host "The following subscriptions will be registered with the Partner Admin Link:`n$($subscriptions | Format-Table | out-string)"
    
    $subscriptions | ForEach-Object 
    {
        New-AzRoleAssignment -ObjectId $customerSp.Id -RoleDefinitionName "Contributor" -Scope "/subscriptions/$_"
    }

    # Login with the above service principal and associate the account to the specified MS Partner ID
    if (!(Get-Module -ListAvailable Az.ManagementPartner)) 
    {
        Install-Module Az.ManagementPartner -Repository PSGallery -Force -Scope CurrentUser
    }

    [PSCredential]$credential = New-Object System.Management.Automation.PSCredential($customerSp.ApplicationId, $customerSpCredential.Secret)

    Connect-AzAccount -ServicePrincipal -Credential $credential -Tenant (Get-AzContext).Tenant
    New-AzManagementPartner -PartnerId $MpnId

    # TODO: Delete the service principal credential 
}

Function Export-CustomerSubscriptionsAsCsvForPartnerAdminLink
{
    <#
    .SYNOPSIS

    Generates a CSV containing all the Azure subscriptions your currently authenticated identity has access to.

    .DESCRIPTION

    One this file has been generated, remove susbscriptions that are not applicable to have PAL assigned to them.
    You will be prompted to authenticate.

    .EXAMPLE

   Export-CustomerSubscriptionsAsCsvForPartnerAdminLink -Path .\customer-subs.csv

    .NOTES

    Use CSV file with the Set-ZeroTrustPartnerAdminLink Cmdlet
    #>

    [CmdletBinding()]
    Param 
    (
        [Parameter()]
        [string] $Path
    )

    Connect-AzAccount

    $subscriptions = Get-AzSubscription | Select-Object Name, Id, TenantId

    Write-Host "A file will be generated for the following subscriptions:`n$($subscriptions | Format-Table | out-string)"

    $subscriptions | Export-Csv $Path

    Write-Host "Generated .csv file: $Path"
}

Function New-ZeroTrustPartnerAdminLinkPartnerIdentity 
{
    <#
    .SYNOPSIS

    Creates the AAD Application and Identity, which will 
        
    .DESCRIPTION

    You will be prompted to authenticate.
        
    .EXAMPLE

    New-ZeroTrustPartnerAdminLinkPartnerIdentity -PartnerName Contoso -AppName "Microsoft-Partner-Admin-Link-Identity"
        
    .PARAMETER PartnerName

    The name of the Microsoft Partner who is assigning the PAL

    .PARAMETER AppName

    Name of the AAD Application, to be created in the Partner's AAD Tenant

    .NOTES

    Will generated an identity called "Microsoft-Partner-Admin-Link-Identity-Contoso". 
    We use the suffix approach as there might be multiple partners who have DPOR in one customer.

    #>
    Param 
    (
        [Parameter(Mandatory=$true)]
        [string] $PartnerName,

        [Parameter()]
        [string] $AppName = "Microsoft-Partner-Admin-Link-Identity"
    )

    Write-Host "Login with an account that has permissions to manage AAD applications"
    
    Connect-AzAccount
    Get-AzContext
    
    Read-Host "Press Return to Create the PAL Identity in the above tenant. Ctrl-C to Exit."

    $domain = (Get-AzTenant -TenantId (Get-AzContext).Tenant.Id).Domains | Select-Object -First 1
    $name = "$AppName-$PartnerName"
    $aadApp = New-AzADApplication -DisplayName $name -IdentifierUris @("https://$domain/$Name") -AvailableToOtherTenants $true

    Write-Host "Partner Admin Link ID: $($aadApp.ApplicationId)"
}

# Write-Host "Ensuring that Az PowerShell modules are available"
# if (!(Get-Module -ListAvailable Az)) {
#     Install-Module Az -AllowClobber -Repository PSGallery -Force -Scope CurrentUser
# }