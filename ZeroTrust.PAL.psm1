Function Export-CustomerSubscriptionsAsCsvForPartnerAdminLink
{
    <#
    .SYNOPSIS

    Generates a CSV containing all the Azure subscriptions your currently authenticated identity has access to.

    .DESCRIPTION

    Once this file has been generated, remove susbscriptions that are not applicable to have PAL assigned to them.
    You will be prompted to authenticate.

    .EXAMPLE

    Export-CustomerSubscriptionsAsCsvForPartnerAdminLink -Path .\customer-subs.csv

    .PARAMETER Path

    Path to a CSV file containing the list of Azure Subscriptions that PAL is going to be set on.

    .NOTES

    Use the CSV file created with the Set-ZeroTrustPartnerAdminLink Cmdlet
    #>

    [CmdletBinding()]
    Param 
    (
        [Parameter()]
        [string] $Path
    )

    Connect-AzAccount

    $subscriptions = Get-AzSubscription | Select-Object Name, Id, TenantId

    Write-Host "A file will be generated for the following subscriptions:`n$($subscriptions | Format-Table | out-string)"

    $subscriptions | Export-Csv $Path

    Write-Host "Generated .csv file: $Path"
}

Function Set-ZeroTrustPartnerAdminLink
{
    <#
    .SYNOPSIS

    Configures Azure Partner Admin Link for the specified subscriptions.

    .DESCRIPTION
        
    .EXAMPLE

    Set-ZeroTrustPartnerAdminLink -PartnerName Contoso -MpnId 12345678 -SubscriptionsCsv .\customer-subs.csv
        
    .PARAMETER SubscriptionsCsv

    Path to a CSV file containing the list of Azure Subscriptions that PAL is going to be set on.
    This list can be generated by The Customer running the Export-CustomerSubscriptionsAsCsvForPartnerAdminLink Cmdlet in The Customer Tenant.

    .PARAMETER PartnerName

    Name of the Microsoft Partner which is going to be assigned PAL. 
    This is used for displaying The Partner's name in the AAD Application registration in The Customer's Tenant.

    .PARAMETER MpnId

    Microsoft Partner's Microsoft Partner Network Id. 
    This should be the Location or HQ based Id and not a Virtual Org.

    .PARAMETER Role

    The Azure Resource Manager role that will be assigned to the AAD Application for each subscription.
    Defaults to 'Support Request Contributor'
    
    .PARAMETER AppNamePrefix

    The naming-convention prefix of the AAD Application, to be created in the Customer's AAD Tenant.
    Defaults to "Microsoft-Partner-Admin-Link-Identity", resulting in applications with the following
    naming convention "Microsoft-Partner-Admin-Link-Identity-<PartnerName>"

    .NOTES
    #>

    [CmdletBinding()]
    Param 
    (
        [Parameter(Mandatory=$true)]
        [string] $SubscriptionsCsv,

        [Parameter(Mandatory=$true)]
        [string] $PartnerName,

        [Parameter(Mandatory=$true)]
        [string] $MpnId,

        [Parameter()]
        [ValidateSet("Owner","Contributor","Support Request Contributor")] 
        [string] $Role = "Support Request Contributor",

        [Parameter()]
        [string] $AppNamePrefix = "Microsoft-Partner-Admin-Link-Identity"
    )

    if (!(Get-Module -ListAvailable Az)) 
    {
        Install-Module Az -AllowClobber -Repository PSGallery -Force -Scope CurrentUser
    }

    Write-Host "Login with an account that has permissions to manage AAD applications and perform ARM role assignments" -f green
    Read-Host "Press <RETURN> to continue, <CTRL-C> to cancel" | Out-Null
    Connect-AzAccount | Out-String | Write-Host -NoNewline

    # Generate an AAD application to represent the Partner organisation
    $name = "$AppNamePrefix-$PartnerName"
    $partnerApp = Get-AzADApplication -DisplayName $name
    if (!$partnerApp) {
        $domain = (Get-AzTenant -TenantId (Get-AzContext).Tenant.Id).Domains | Select-Object -First 1
        $partnerApp = New-AzADApplication -DisplayName $name -IdentifierUris @("https://$domain/$name")
    }
    # Create a short-lived client secret for the Partner application
    $secret = (New-Guid).Guid | ConvertTo-SecureString -AsPlainText
    $clientSecret = New-AzADAppCredential -ObjectId $partnerApp.ObjectId -Password $secret -EndDate ([DateTime]::Now.AddMinutes(10))

    # Assign the PAL to each of the required subscriptions
    $subscriptions = Import-Csv $SubscriptionsCsv

    Write-Host "`nThe following subscriptions will be registered with the Partner Admin Link:" -f green
    Write-Host ($subscriptions | Format-Table | out-string) -NoNewline
    
    $subscriptions | ForEach-Object {
        $existingAssignment = Get-AzRoleAssignment -ObjectId $partnerApp.ObjectId -RoleDefinitionName "Contributor" -Scope "/subscriptions/$($_.Id)"
        if (!$existingAssignment) {
            Write-Host "Assigning 'Contributor' role to subscription: $($_.Id)" -f green
            New-AzRoleAssignment -ObjectId $partnerApp.ObjectId -RoleDefinitionName $Role -Scope "/subscriptions/$($_.Id)" | Out-Null
        }
        else {
            Write-Host "'Contributor' role already assigned to subscription: $($_.Id)" -f green
        }
    }

    # Login with the above service principal and associate the account to the specified MS Partner ID
    if (!(Get-Module -ListAvailable Az.ManagementPartner)) 
    {
        Install-Module Az.ManagementPartner -Repository PSGallery -Force -Scope CurrentUser | Out-Null
    }

    Write-Host "`nAuthenticating as ZeroTrust PAL service principal..."

    $checkCredential = $false
    while(!$checkCredential) {
        Start-Sleep -Seconds 5
        $checkCredential = Get-AzADAppCredential -ObjectId $partnerApp.ObjectId | Where-Object { $_.KeyId -eq $clientSecret.KeyId }
    }
    # logout of previous session
    $tenantId = (Get-AzContext).Tenant.Id
    Disconnect-AzAccount | Out-Null

    # login as the Partner AAD Application identity
    [PSCredential]$credential = New-Object System.Management.Automation.PSCredential($partnerApp.ApplicationId, $secret)
    Connect-AzAccount -ServicePrincipal -Credential $credential -Tenant $tenantId | Out-Null
    
    # link the Partner's MPN ID
    $existingPartner = Get-AzManagementPartner | Where-Object { $_.PartnerId -eq $MpnId }
    if (!$existingPartner) {
        Write-Host "`nLinking to MPN ID: $MpnId" -f green
        New-AzManagementPartner -PartnerId $MpnId
    }
    else {
        Write-Host "`nMPN ID already linked" -f green
    }

    Disconnect-AzAccount | Out-Null
}

$ErrorActionPreference = 'Stop'

if (!(Get-Module -ListAvailable Az)) {
    Write-Host "Az PowerShell modules are required"
    Write-Host "They will be installed with:`n`tInstall-Module Az -AllowClobber -Repository PSGallery -Force -Scope CurrentUser"
    Write-Host "This may take a few minutes..."
    Install-Module Az -AllowClobber -Repository PSGallery -Force -Scope CurrentUser
}