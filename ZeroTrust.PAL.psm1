Function Set-ZeroTrustPartnerAdminLink
{
    <#
    .SYNOPSIS

    Configures Azure Partner Admin Link for the specified subscriptions.

    .DESCRIPTION
        
    .EXAMPLE

    Set-ZeroTrustPartnerAdminLink -PartnerName Contoso -MpnId 12345678 -PartnerIdentityAppId 2038cf8a-8086-4b02-809f-28ecc24c60a3 -SubscriptionsCsv .\customer-subs.csv
        
    .PARAMETER SubscriptionsCsv

    Path to a CSV file containing the list of Azure Subscriptions that PAL is going to be set on.
    This list can be generated by The Customer running the Export-CustomerSubscriptionsAsCsvForPartnerAdminLink Cmdlet in The Customer Tenant.

    .PARAMETER PartnerName

    Name of the Microsoft Partner which is going to be assigned PAL. 
    This is used for displaying The Partner's name in the Service Principal in The Customer's Tenant.

    .PARAMETER PartnerIdentityAppId

    The Application Id of The Partner's PAL AAD Application in The Partner's Tenant.

    .PARAMETER MpnId

    Microsoft Partner's Microsoft Partner Network Id. 
    This should be the Location or HQ based Id and not a Virtual Org.

    .NOTES
    #>

    [CmdletBinding()]
    Param 
    (
        [Parameter(Mandatory=$true)]
        [string] $SubscriptionsCsv,

        [Parameter(Mandatory=$true)]
        [string] $PartnerName,

        [Parameter(Mandatory=$true)]
        [guid] $PartnerIdentityAppId,

        [Parameter(Mandatory=$true)]
        [string] $MpnId
    )

    $ErrorActionPreference = 'Stop'

    if (!(Get-Module -ListAvailable Az)) 
    {
        Install-Module Az -AllowClobber -Repository PSGallery -Force -Scope CurrentUser
    }

    Write-Host "Login with an account that has permissions to manage AAD applications and perform ARM role assignments"
    Connect-AzAccount

    # Create a service principal associated with partner identity
    $customerSp = New-AzADServicePrincipal -DisplayName "$PartnerName Partner Admin Link - DO NOT DELETE" -ApplicationId $PartnerIdentityAppId -SkipAssignment
    $customerSpCredential = New-AzADServicePrincipalCredential -ObjectId $customerSp.Id

    # Assign the PAL to each of the required subscriptions
    $subscriptions = Import-Csv $SubscriptionsCsv
    Write-Host "The following subscriptions will be registered with the Partner Admin Link:`n$($subscriptions | Format-Table | out-string)"
    
    $subscriptions | ForEach-Object 
    {
        New-AzRoleAssignment -ObjectId $customerSp.Id -RoleDefinitionName "Contributor" -Scope "/subscriptions/$_"
    }

    # Login with the above service principal and associate the account to the specified MS Partner ID
    if (!(Get-Module -ListAvailable Az.ManagementPartner)) 
    {
        Install-Module Az.ManagementPartner -Repository PSGallery -Force -Scope CurrentUser
    }

    [PSCredential]$credential = New-Object System.Management.Automation.PSCredential($customerSp.ApplicationId, $customerSpCredential.Secret)

    Connect-AzAccount -ServicePrincipal -Credential $credential -Tenant (Get-AzContext).Tenant
    New-AzManagementPartner -PartnerId $MpnId
}

Function Export-CustomerSubscriptionsAsCsvForPartnerAdminLink
{
    <#
    .SYNOPSIS

    Generates a CSV containing all the Azure subscriptions your currently authenticated identity has access to.

    .DESCRIPTION

    Once this file has been generated, remove susbscriptions that are not applicable to have PAL assigned to them.
    You will be prompted to authenticate.

    .EXAMPLE

    Export-CustomerSubscriptionsAsCsvForPartnerAdminLink -Path .\customer-subs.csv

    .PARAMETER Path

    Path to a CSV file containing the list of Azure Subscriptions that PAL is going to be set on.

    .NOTES

    Use the CSV file created with the Set-ZeroTrustPartnerAdminLink Cmdlet
    #>

    [CmdletBinding()]
    Param 
    (
        [Parameter()]
        [string] $Path
    )

    Connect-AzAccount

    $subscriptions = Get-AzSubscription | Select-Object Name, Id, TenantId

    Write-Host "A file will be generated for the following subscriptions:`n$($subscriptions | Format-Table | out-string)"

    $subscriptions | Export-Csv $Path

    Write-Host "Generated .csv file: $Path"
}

Function New-ZeroTrustPartnerAdminLinkPartnerIdentity 
{
    <#
    .SYNOPSIS

    Creates the AAD Application and Identity, in The Partner Tenant, which will be linked from The Customer's Tenant.
        
    .DESCRIPTION

    You will be prompted to authenticate.
        
    .EXAMPLE

    New-ZeroTrustPartnerAdminLinkPartnerIdentity -PartnerName Contoso -AppNamePrefix "Microsoft-Partner-Admin-Link-Identity"
        
    .PARAMETER PartnerName

    The name of the Microsoft Partner who is assigning the PAL. This is appended to the AppNamePrefix to form the AAD Application display name in The Partner's Tenant.
    This is then visible in The Customer's Tenant. There may be multiple Partners in a Customer Tenant. 

    .PARAMETER AppNamePrefix

    Name of the AAD Application, to be created in the Partner's AAD Tenant.

    .NOTES

    From the example above, this Cmdlet Will generated an identity called "Microsoft-Partner-Admin-Link-Identity-Contoso". 
    We use the suffix approach as there might be multiple partners who have DPOR in one customer, and this allows them to be grouped together.

    #>
    Param 
    (
        [Parameter(Mandatory=$true)]
        [string] $PartnerName,

        [Parameter()]
        [string] $AppNamePrefix = "Microsoft-Partner-Admin-Link-Identity"
    )

    Write-Host "Login with an account that has permissions to manage AAD applications"
    
    Connect-AzAccount
    Get-AzContext
    
    Read-Host "Press Return to Create the PAL Identity in the above tenant. Ctrl-C to Exit."

    $domain = (Get-AzTenant -TenantId (Get-AzContext).Tenant.Id).Domains | Select-Object -First 1
    $name = "$AppNamePrefix-$PartnerName"
    $aadApp = New-AzADApplication -DisplayName $name -IdentifierUris @("https://$domain/$Name") -AvailableToOtherTenants $true

    Write-Host "Share the value below with your Customer, as they will need to provide this as the PartnerIdentityAppId parameter to the Set-ZeroTrustPartnerAdminLink Cmdlet."
    Write-Host "Partner Admin Link ID: $($aadApp.ApplicationId)"
}